<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 
		이 파일은 프로그램 전체에 영향을 미치는 스프링 설정을 작성하는 파일이다!
	 -->
	 
 	<!-- 
		Controller를 제외한 나머지 요소들은 전역 설정파일인 root-context.xml에 등록한다		
	 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 복사한 뒤 반드시 고쳐야 하는 부분 -->
	<context:component-scan base-package="com.kh.e3i1" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 복사한 뒤 반드시 고쳐야 하는 부분 -->
	
	<!-- 
		데이터베이스 연결 객체를 등록
		[1] 일반 연결(DriverManagerDataSource) - Spring JDBC 모듈
		[2] DBCP 연결(BasicDataSource) - Apache Commons DBCP 모듈
		
		id : 내부적으로 사용하는 식별자
		class : 등록할 클래스 전체경로
	 -->
	 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>
	
	<bean id="dbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
		
		<property name="maxTotal" value="${database.max-total}"></property>
		<property name="maxIdle" value="${database.max-idle}"></property>
		<property name="maxWaitMillis" value="${database.max-wait}"></property>
	</bean>
	
	<!-- 
		스프링에서 제공하는 JDBC 도구
		- 연결/종료가 필요하므로 기존에 등록한 연결도구를 참조(ref) 설정
	 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dbcpSource"></property>
	</bean>
	
	<!-- 
		mybatis를 사용하기 위한 도구
		- SqlSessionFactoryBean : 스프링에서 SqlSessionFactory를 생성하기 위한 도구
		- SqlSessionTemplate : 스프링에서 SqlSession을 생성하기 위한 도구
	 -->
	<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dbcpSource"></property>
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/mybatis/mapper/**/*-mapper.xml"></property>
	</bean>
	
	<!-- 
		tip : <property>는 setter 메소드를 이용한 설정을 지시, <constructor-args>는 생성자를 이용한 설정을 지시
	 -->
	<bean id="template" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="factory"></constructor-arg>
	</bean>
	
	<!-- 암호화 도구 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
		
	<!-- 
		트랜잭션(transaction) 설정 
		- 묶음 처리되어야 하는 DB 작업에 대한 선언 및 관리
		- 전부 다 되거나 안되거나 해야 하는 경우(일부분만 되면 안되는 경우)
		- <tx:annotation-driven/> 으로 @Transactional 애노테이션 활성화
		- "transactionManager"라는 ID를 가지는 트랜잭션 관리 객체를 등록
			- org.springframework.jdbc.datasource.DataSourceTransactionManager
		- 묶음 처리하고 싶은 메소드에 @Transactional 애노테이션을 추가
	-->
	<tx:annotation-driven/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dbcpSource"></property>
	</bean>
	
	<!-- 
		이메일 전송 도구
	-->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}"></property>
		<property name="port" value="${email.port}"></property>
		<property name="username" value="${email.username}"></property>
		<property name="password" value="${email.password}"></property>
		
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.debug">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
				<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
			</props>
		</property>
	</bean>
	<!--  스케쥴러 설정 -->
	<task:annotation-driven/>	
	
	<!-- 
	모든 properties 파일의 정보를 불러오도록 설정 -->
	<context:property-placeholder location="classpath:/properties/**/*.properties"/>
</beans>



